{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elmoi\\\\OneDrive\\\\Escritorio\\\\unapec\\\\2do cuat\\\\verificacion y validacion de software\\\\reactPruebas\\\\weather-app\\\\src\\\\WeatherDisplay.js\";\nimport React from 'react';\n\nfunction WeatherDisplay(props) {\n  const forecast = props.weather;\n  const iconURL = `owf owf-${forecast.cod} owf-5x`; //obtains day of week\n\n  const dayOfWeek = date => {\n    /*\r\n    the Date constructor uses the UNIX Timestamp with milliseconds, but OpenWeatherAPI call uses it without.\r\n    So we multiply the given timestamp date by 1000 to add the milliseconds.\r\n    */\n    const d = new Date(date * 1000);\n    const index = d.getDay();\n    console.log(d);\n    return d.toString().split(\" \")[0] + \", \" + d.toString().split(\" \")[1] + \" \" + d.toString().split(\" \")[2];\n    return [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index] + \", \" + d.toString().split(\" \")[1] + \" \" + d.toString().split(\" \")[2];\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, forecast.name, \", \", forecast.sys.country, \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, dayOfWeek(forecast.dt)), /*#__PURE__*/React.createElement(\"i\", {\n    className: iconURL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, Math.round(forecast.main.temp), \" \\xB0C | \", Math.round(forecast.main.temp * 9 / 5 + 32), \" \\xB0F \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, forecast.weather[0].description, \" \"));\n}\n\nexport default WeatherDisplay;","map":{"version":3,"sources":["C:/Users/elmoi/OneDrive/Escritorio/unapec/2do cuat/verificacion y validacion de software/reactPruebas/weather-app/src/WeatherDisplay.js"],"names":["React","WeatherDisplay","props","forecast","weather","iconURL","cod","dayOfWeek","date","d","Date","index","getDay","console","log","toString","split","name","sys","country","dt","Math","round","main","temp","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,QAAQ,GAAGD,KAAK,CAACE,OAAvB;AACA,QAAMC,OAAO,GAAI,WAAUF,QAAQ,CAACG,GAAI,SAAxC,CAF6B,CAG7B;;AACA,QAAMC,SAAS,GAAIC,IAAD,IAAS;AACzB;;;;AAIA,UAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAI,GAAG,IAAhB,CAAV;AACA,UAAMG,KAAK,GAAGF,CAAC,CAACG,MAAF,EAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,CAAZ;AACA,WAAOA,CAAC,CAACM,QAAF,GAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,IAA2B,IAA3B,GAAgCP,CAAC,CAACM,QAAF,GAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAhC,GAA2D,GAA3D,GAA+DP,CAAC,CAACM,QAAF,GAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAtE;AACA,WAAO,CAAC,QAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,WAA/B,EAA4C,UAA5C,EAAwD,QAAxD,EAAkE,UAAlE,EAA8EL,KAA9E,IAAqF,IAArF,GACPF,CAAC,CAACM,QAAF,GAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CADO,GACoB,GADpB,GACwBP,CAAC,CAACM,QAAF,GAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAD/B;AAED,GAXD;;AAYA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKb,QAAQ,CAACc,IAAd,QAAsBd,QAAQ,CAACe,GAAT,CAAaC,OAAnC,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKZ,SAAS,CAACJ,QAAQ,CAACiB,EAAV,CAAd,CAFF,eAGE;AAAG,IAAA,SAAS,EAAEf,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKgB,IAAI,CAACC,KAAL,CAAWnB,QAAQ,CAACoB,IAAT,CAAcC,IAAzB,CAAL,eAA2CH,IAAI,CAACC,KAAL,CAAWnB,QAAQ,CAACoB,IAAT,CAAcC,IAAd,GAAqB,CAArB,GAAuB,CAAvB,GAA2B,EAAtC,CAA3C,YAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIrB,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBqB,WAAxB,MALF,CADF;AASD;;AAED,eAAexB,cAAf","sourcesContent":["import React from 'react';\r\n\r\nfunction WeatherDisplay(props) {\r\n  const forecast = props.weather\r\n  const iconURL = `owf owf-${forecast.cod} owf-5x`\r\n  //obtains day of week\r\n  const dayOfWeek = (date) =>{\r\n    /*\r\n    the Date constructor uses the UNIX Timestamp with milliseconds, but OpenWeatherAPI call uses it without.\r\n    So we multiply the given timestamp date by 1000 to add the milliseconds.\r\n    */\r\n    const d = new Date(date * 1000)\r\n    const index = d.getDay()\r\n    console.log(d)\r\n    return d.toString().split(\" \")[0]+\", \"+d.toString().split(\" \")[1]+\" \"+d.toString().split(\" \")[2]\r\n    return [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][index]+\", \"+\r\n    d.toString().split(\" \")[1]+\" \"+d.toString().split(\" \")[2]\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>{forecast.name}, {forecast.sys.country} </h1>\r\n      <h3>{dayOfWeek(forecast.dt)}</h3>\r\n      <i className={iconURL}></i>\r\n      <h3>{Math.round(forecast.main.temp)} °C | {Math.round(forecast.main.temp * 9/5 + 32)} °F </h3>\r\n      <p>{forecast.weather[0].description} </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherDisplay;"]},"metadata":{},"sourceType":"module"}