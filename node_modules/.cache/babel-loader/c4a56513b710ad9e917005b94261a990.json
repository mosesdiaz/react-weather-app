{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elmoi\\\\OneDrive\\\\Escritorio\\\\unapec\\\\2do cuat\\\\verificacion y validacion de software\\\\reactPruebas\\\\weather-app\\\\src\\\\DayForecast.js\";\nimport React from 'react';\n\nfunction DayForecast(props) {\n  const forecast = props.forecast; //icons from owfont - symbol font for Open Weather Map API\n\n  const icon = `owf owf-${forecast.weather[0].id} owf-5x`; //obtains day of week\n\n  const dayOfWeek = date => {\n    /*\r\n    the Date constructor uses the UNIX Timestamp with milliseconds, but OpenWeatherAPI call uses it without.\r\n    So we multiply the given timestamp date by 1000 to add the milliseconds.\r\n    */\n    const d = new Date(date * 1000).toString();\n    console.log(d);\n    return `${d.substring(0, 3)}, ${d.substring(4, 11)}`;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    style: {\n      width: 300\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, dayOfWeek(forecast.dt)), /*#__PURE__*/React.createElement(\"i\", {\n    className: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, forecast.weather[0].description), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, Math.round(forecast.main.temp), \" \\xB0C | \", Math.round(forecast.main.temp * 9 / 5 + 32), \" \\xB0F \")));\n}\n\nexport default DayForecast;","map":{"version":3,"sources":["C:/Users/elmoi/OneDrive/Escritorio/unapec/2do cuat/verificacion y validacion de software/reactPruebas/weather-app/src/DayForecast.js"],"names":["React","DayForecast","props","forecast","icon","weather","id","dayOfWeek","date","d","Date","toString","console","log","substring","width","dt","description","Math","round","main","temp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB,CAD0B,CAE1B;;AACA,QAAMC,IAAI,GAAI,WAAUD,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBC,EAAG,SAA/C,CAH0B,CAI1B;;AACA,QAAMC,SAAS,GAAIC,IAAD,IAAS;AACzB;;;;AAIA,UAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAI,GAAG,IAAhB,EAAsBG,QAAtB,EAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAZ;AACA,WAAQ,GAAEA,CAAC,CAACK,SAAF,CAAY,CAAZ,EAAc,CAAd,CAAiB,KAAIL,CAAC,CAACK,SAAF,CAAY,CAAZ,EAAc,EAAd,CAAkB,EAAjD;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKR,SAAS,CAACJ,QAAQ,CAACa,EAAV,CAAd,CADJ,eAEI;AAAG,IAAA,SAAS,EAAEZ,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBY,WAAxB,CAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,IAAI,CAACC,KAAL,CAAWhB,QAAQ,CAACiB,IAAT,CAAcC,IAAzB,CAAL,eAA2CH,IAAI,CAACC,KAAL,CAAWhB,QAAQ,CAACiB,IAAT,CAAcC,IAAd,GAAqB,CAArB,GAAuB,CAAvB,GAA2B,EAAtC,CAA3C,YAJJ,CADJ,CADF;AAUD;;AAED,eAAepB,WAAf","sourcesContent":["import React from 'react';\r\n\r\nfunction DayForecast(props) {\r\n  const forecast = props.forecast\r\n  //icons from owfont - symbol font for Open Weather Map API\r\n  const icon = `owf owf-${forecast.weather[0].id} owf-5x`\r\n  //obtains day of week\r\n  const dayOfWeek = (date) =>{\r\n    /*\r\n    the Date constructor uses the UNIX Timestamp with milliseconds, but OpenWeatherAPI call uses it without.\r\n    So we multiply the given timestamp date by 1000 to add the milliseconds.\r\n    */\r\n    const d = new Date(date * 1000).toString()\r\n    console.log(d)\r\n    return `${d.substring(0,3)}, ${d.substring(4,11)}`\r\n  }\r\n  \r\n  return (\r\n    <div className=\"column\">\r\n        <div className=\"box\" style={{width: 300}}>\r\n            <h3>{dayOfWeek(forecast.dt)}</h3>\r\n            <i className={icon}></i>\r\n            <p>{forecast.weather[0].description}</p>\r\n            <h3>{Math.round(forecast.main.temp)} °C | {Math.round(forecast.main.temp * 9/5 + 32)} °F </h3>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DayForecast;"]},"metadata":{},"sourceType":"module"}